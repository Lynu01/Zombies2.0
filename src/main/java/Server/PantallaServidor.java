/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Server;

import Modelos.Mensaje; // Necesario para TipoMensaje
import Modelos.TipoMensaje; // Necesario para TipoMensaje
import java.io.File;
import java.io.IOException; // Necesario para IOException
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

/**
 *
 * @author jos_m
 */
public class PantallaServidor extends javax.swing.JFrame {
    
    Servidor server;
    
    /**
     * Creates new form PantallaServidor
     */
    public PantallaServidor() {
        initComponents();
        server = new Servidor(this);
    }
    
    public void write(String texto) {
        if (txtAreaServer != null) {
            // Asegurar que la actualización de la UI se haga en el Event Dispatch Thread
            javax.swing.SwingUtilities.invokeLater(() -> {
                txtAreaServer.append(texto + "\n");
                txtAreaServer.setCaretPosition(txtAreaServer.getDocument().getLength()); // Auto-scroll
            });
        } else {
            System.err.println("SERVER_UI_ERROR: txtAreaServer es nulo. Mensaje: " + texto);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        txtAreaServer = new javax.swing.JTextArea();
        btnIniciarJuego = new javax.swing.JButton();
        btnFinalizarJuegoActual = new javax.swing.JButton();
        btnPararServer = new javax.swing.JButton();
        btnAgregarMapa = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        txtAreaServer.setEditable(false);
        txtAreaServer.setColumns(20);
        txtAreaServer.setRows(5);
        jScrollPane1.setViewportView(txtAreaServer);

        btnIniciarJuego.setText("Iniciar Juego / Próximo Nivel");
        btnIniciarJuego.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnIniciarJuegoActionPerformed(evt);
            }
        });

        btnFinalizarJuegoActual.setText("Forzar Reinicio (Nivel 1)");
        btnFinalizarJuegoActual.setToolTipText("Termina la partida actual y prepara para reiniciar en nivel 1. Los jugadores volverán al lobby.");
        btnFinalizarJuegoActual.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFinalizarJuegoActualActionPerformed(evt);
            }
        });

        btnPararServer.setText("Parar Servidor");
        btnPararServer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPararServerActionPerformed(evt);
            }
        });

        btnAgregarMapa.setText("Agregar Mapa (.txt)");
        btnAgregarMapa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAgregarMapaActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 550, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnIniciarJuego, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnFinalizarJuegoActual, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnPararServer, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnAgregarMapa, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(20, 20, 20))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnIniciarJuego, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnFinalizarJuegoActual, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnAgregarMapa, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnPararServer, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE))
                .addGap(20, 20, 20))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnIniciarJuegoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnIniciarJuegoActionPerformed
        if (server.getNombresEnEsperaList().isEmpty() && server.getJugadoresMap().isEmpty()) {
            write("No hay jugadores en espera ni activos para iniciar el juego.");
            JOptionPane.showMessageDialog(this, "No hay jugadores conectados o en espera.", "Juego no iniciado", JOptionPane.WARNING_MESSAGE);
            return;
        }
        // Si hay jugadores activos (posiblemente de un nivel anterior)
        // o jugadores en espera, iniciarJuego los procesará.
        server.iniciarJuego(); 
    }//GEN-LAST:event_btnIniciarJuegoActionPerformed

    private void btnAgregarMapaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAgregarMapaActionPerformed
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogTitle("Seleccionar nuevo mapa (.txt)");
        fileChooser.setFileFilter(new javax.swing.filechooser.FileNameExtensionFilter("Archivos de Texto (.txt)", "txt"));
        fileChooser.setAcceptAllFileFilterUsed(false);

        int resultado = fileChooser.showOpenDialog(this);
        if (resultado == JFileChooser.APPROVE_OPTION) {
            File archivoSeleccionado = fileChooser.getSelectedFile();
            server.copiarMapaAlProyecto(archivoSeleccionado); // El método en Servidor maneja la lógica y logs
        }
    }//GEN-LAST:event_btnAgregarMapaActionPerformed

    private void btnFinalizarJuegoActualActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFinalizarJuegoActualActionPerformed
        write("Forzando reinicio del juego al nivel 1...");
        server.reiniciarJuegoAlNivel1();
        // Los clientes serán notificados para volver al lobby y cargar el mapa1.
    }//GEN-LAST:event_btnFinalizarJuegoActualActionPerformed

    private void btnPararServerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPararServerActionPerformed
        write("Iniciando secuencia de parada del servidor...");
        server.detenerServidor(); // Esto notificará a los clientes y cerrará sockets
        // Después de un breve retraso para permitir que los mensajes se envíen, cerrar la aplicación.
        // Este dispose() + System.exit() es para cerrar la UI del servidor.
        // El server.detenerServidor() ya maneja el cierre de ServerSocket y threads.
        try {
            Thread.sleep(500); // Dar tiempo a que se envíen los mensajes de cierre
        } catch (InterruptedException e) {
            Thread.currentThread().interrupt();
        }
        this.dispose();
        System.exit(0);
    }//GEN-LAST:event_btnPararServerActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        btnPararServerActionPerformed(null); // Reutilizar la lógica del botón para asegurar cierre limpio.
    }//GEN-LAST:event_formWindowClosing

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PantallaServidor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PantallaServidor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PantallaServidor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PantallaServidor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new PantallaServidor().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAgregarMapa;
    private javax.swing.JButton btnFinalizarJuegoActual;
    private javax.swing.JButton btnIniciarJuego;
    private javax.swing.JButton btnPararServer;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea txtAreaServer;
    // End of variables declaration//GEN-END:variables
}